# Convert .pcf to a .place file that VPR can accept
pcf2place --pcf ${OPENFPGA_PCF} \
          --blif ${VPR_TESTBENCH_BLIF} \
          --pin_table ${OPENFPGA_PIN_TABLE} \
          --fpga_io_map ${OPENFPGA_IO_MAP_FILE} \
          --fpga_fix_pins ${OPENFPGA_VPR_FIX_PINS_FILE} \
          --pin_table_direction_convention ${OPENFPGA_PIN_TABLE_DIRECTION_CONVENTION}

# Run VPR for the 'and' design
vpr ${VPR_ARCH_FILE} ${VPR_TESTBENCH_BLIF} \
  --clock_modeling ideal \
  --device ${OPENFPGA_VPR_DEVICE_LAYOUT} \
  --route_chan_width ${OPENFPGA_VPR_ROUTE_CHAN_WIDTH} \
  --absorb_buffer_luts off \
  --write_rr_graph rr_graph_out.xml \
  --skip_sync_clustering_and_routing_results on

# Read OpenFPGA architecture definition
read_openfpga_arch -f ${OPENFPGA_ARCH_FILE}

# Read OpenFPGA simulation settings
read_openfpga_simulation_setting -f ${OPENFPGA_SIM_SETTING_FILE}

# Annotate the OpenFPGA architecture to VPR data base
# to debug use --verbose options
link_openfpga_arch --activity_file ${ACTIVITY_FILE} --sort_gsb_chan_node_in_edges

# Check and correct any naming conflicts in the BLIF netlist
check_netlist_naming_conflict --fix --report ./netlist_renaming.xml

# Apply fix-up to clustering nets based on routing results
pb_pin_fixup --verbose

# Apply fix-up to Look-Up Table truth tables based on packing results
lut_truth_table_fixup

# Build the module graph
#  - Enabled compression on routing architecture modules
#  - Enable pin duplication on grid modules
build_fabric --compress_routing #--verbose

# Write I/O net mapping information
write_io_mapping --file benchmark_io_mapping.xml --verbose --no_time_stamp

# Write the fabric hierarchy of module graph to a file
# This is used by hierarchical PnR flows
write_fabric_hierarchy --file ./fabric_hierarchy.txt

# Repack the netlist to physical pbs
# This must be done before bitstream generator and testbench generation
# Strongly recommend it is done after all the fix-up have been applied
repack
# --verbose

# Build the bitstream
#  - Output the fabric-independent bitstream to a file
build_architecture_bitstream --verbose --write_file fabric_independent_bitstream.xml

# Build fabric-dependent bitstream
build_fabric_bitstream --verbose

# Write fabric-dependent bitstream
write_fabric_bitstream --file fabric_bitstream.bit --format plain_text

exit